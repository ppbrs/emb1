{
	// =============================================================================================
	"folders": [
		{
			"path": ".",
		},
		// {
		//   "path": "/usr/share/openocd/scripts/",
		//   "name": "/usr/share/openocd/scripts/",
		//   // "path": "/usr/share/openocd/",
		//   // "name": "/usr/share/openocd/",
		// },
		// {
		//   "path": "./../3party/FreeRTOS-LTS",
		// },
		// {
		//   "path": "./../3party/STM32CubeH7/Drivers/STM32H7xx_HAL_Driver",
		// },
		// {
		//   "path": "./../3party/stlink",
		// },
		// {
		// 	"path": "~/.local/lib/python3.10/site-packages/elftools",
		// },
		// {
		// 	"path": "/opt/gcc-arm-none-eabi-10.3-2021.10/",
		// },
		{
			"path": "~/zephyrproject/zephyr",
		},
	],
	// =============================================================================================
	"build_systems": [
		// -----------------------------------------------------------------------------------------
		{
			"name": "Baremetal Riga",
			"shell_cmd": "${file}",
			"variants": [
				{
					"name": "Start OpenOCD.",
					"shell_cmd": "gnome-terminal --full-screen -- bash -c \"cd ${project_path} && openocd -f boards/riga.openocd.cfg; exec bash\"",
				},
				{
					"name": "Make all with GNU.",
					"shell_cmd": "cd ${project_path} && export EMB1_TOOLCHAIN=gnu && make riga-comm-00 && make stm32f051-sbx && echo -e \"\nSUCCESS\"",
					"file_regex": "^(..[^:]*):([0-9]+):?([0-9]+)?:? (.*)$",
				},
				{
					"name": "STM32F051-SBX: GNU: Make.",
					"shell_cmd": "cd ${project_path} && export EMB1_TOOLCHAIN=gnu && make stm32f051-sbx && echo -e \"\nSUCCESS\"",
					"file_regex": "^(..[^:]*):([0-9]+):?([0-9]+)?:? (.*)$",
				},
				{
					"name": "STM32F051-SBX: LLVM: Make.",
					"shell_cmd": "cd ${project_path} && export EMB1_TOOLCHAIN=llvm && make stm32f051-sbx && echo -e \"\nSUCCESS\"",
					"file_regex": "^(..[^:]*):([0-9]+):?([0-9]+)?:? (.*)$",
				},
				{
					"name": "STM32F051-SBX: GNU: Rebuild.",
					"shell_cmd": "cd ${project_path} && export EMB1_TOOLCHAIN=gnu && make -B stm32f051-sbx && echo -e \"\nSUCCESS\"",
					"file_regex": "^(..[^:]*):([0-9]+):?([0-9]+)?:? (.*)$",
				},
				{
					"name": "STM32F051-SBX: LLVM: Rebuild.",
					"shell_cmd": "cd ${project_path} && export EMB1_TOOLCHAIN=llvm && make -B stm32f051-sbx && echo -e \"\nSUCCESS\"",
					"file_regex": "^(..[^:]*):([0-9]+):?([0-9]+)?:? (.*)$",
				},
				{
					"name": "RIGA-COMM-00: GNU: Make.",
					"shell_cmd": "cd ${project_path} && export EMB1_TOOLCHAIN=gnu && make riga-comm-00 && echo -e \"\nSUCCESS\"",
					"file_regex": "^(..[^:]*):([0-9]+):?([0-9]+)?:? (.*)$",
				},
				{
					"name": "RIGA-COMM-00: LLVM: Make.",
					"shell_cmd": "cd ${project_path} && export EMB1_TOOLCHAIN=llvm && make riga-comm-00 && echo -e \"\nSUCCESS\"",
					"file_regex": "^(..[^:]*):([0-9]+):?([0-9]+)?:? (.*)$",
				},
				{
					"name": "RIGA-COMM-00: GNU: Rebuild.",
					"shell_cmd": "cd ${project_path} && export EMB1_TOOLCHAIN=gnu && make -B riga-comm-00 && echo -e \"\nSUCCESS\"",
					"file_regex": "^(..[^:]*):([0-9]+):?([0-9]+)?:? (.*)$",
				},
				{
					"name": "RIGA-COMM-00: LLVM: Rebuild.",
					"shell_cmd": "cd ${project_path} && export EMB1_TOOLCHAIN=llvm && make -B riga-comm-00 && echo -e \"\nSUCCESS\"",
					"file_regex": "^(..[^:]*):([0-9]+):?([0-9]+)?:? (.*)$",
				},
				{
					"name": "RIGA-COMM-00: GNU: Program via Telnet.",
					"working_dir": "${project_path}",
					"shell_cmd": "python3 scripts/flash_write_openocd.py --telnet --target stm32f0x.cpu --elf bin/riga-comm-00.gnu.elf",
				},
				{
					"name": "RIGA-COMM-00: GNU: Program via SWD.",
					"working_dir": "${project_path}",
					"shell_cmd": "python3 scripts/flash_write_openocd.py --swd --openocd-config boards/riga.openocd.cfg --elf bin/riga-comm-00.gnu.elf",
				},
			],
		},
		// -----------------------------------------------------------------------------------------
		{
			"name": "Baremetal Rijeka",
			"shell_cmd": "${file}",
			"variants": [
				{
					"name": "STM32H743-SBX: Make.",
					"shell_cmd": "cd ${project_path} && make stm32h743-sbx && echo -e \"\nSUCCESS\"",
					"file_regex": "^(..[^:]*):([0-9]+):?([0-9]+)?:? (.*)$",
				},
				{
					"name": "STM32H743-SBX: Rebuild with GNU.",
					"shell_cmd": "cd ${project_path} && export EMB1_TOOLCHAIN=gnu && make -B stm32h743-sbx && echo -e \"\nSUCCESS\"",
					"file_regex": "^(..[^:]*):([0-9]+):?([0-9]+)?:? (.*)$",
				},
				{
					"name": "STM32H743-SBX: Rebuild with LLVM.",
					"shell_cmd": "cd ${project_path} && export EMB1_TOOLCHAIN=llvm && make -B stm32h743-sbx && echo -e \"\nSUCCESS\"",
					"file_regex": "^(..[^:]*):([0-9]+):?([0-9]+)?:? (.*)$",
				},
				{
					"name": "STM32H743-SBX: Start GDB.",
					"shell_cmd": "gnome-terminal --full-screen -- bash -c \"cd ${project_path} && gdb-multiarch -x app/stm32h743_sbx/openocd.gdb  ./bin/stm32h743-sbx.elf\"",
				},
				{
					"name": "Start OpenOCD on Rijeka board.",
					"shell_cmd": "gnome-terminal --full-screen -- bash -c \"cd ${project_path} && boards/rijeka.openocd.sh; exec bash\"",
				},
				{
					"name": "Start OpenOCD on Rimini board.",
					"shell_cmd": "gnome-terminal --full-screen -- bash -c \"cd ${project_path} && openocd -f boards/rimini.openocd.cfg; exec bash\"",
				},
				{
					"name": "make clean",
					"shell_cmd": "cd ${project_path} && export EMB1_TOOLCHAIN=llvm && make clean",
				},
				{
					"name": "bash: make executable",
					"shell_cmd": "chmod +x ${file}",
				},
				{
					"name": "clang-format-14: Format this file, edit inplace.",
					"shell_cmd": "clang-format-14 ${file} --style=file -i",
				},
			],
		},
		// -----------------------------------------------------------------------------------------
		{
			"name": "Zephyr OS based projects",
			"shell_cmd": "${file}",
			"variants":
			[
				{
					"name": "STM32H743-ZEPHYR-SBX: Make.",
					"working_dir": "${project_path}/app/stm32h743_zephyr_sbx/",
					"shell_cmd": "./prj-build-flash.sh make",
				},
				{
					"name": "STM32H743-ZEPHYR-SBX: Rebuild.",
					"working_dir": "${project_path}/app/stm32h743_zephyr_sbx/",
					"shell_cmd": "./prj-build-flash.sh rebuild",
				},
				{
					"name": "STM32H743-ZEPHYR-SBX: Make and flash.",
					"working_dir": "${project_path}/app/stm32h743_zephyr_sbx/",
					"shell_cmd": "./prj-build-flash.sh flash",
				},
				{
					"name": "STM32F051-ZEPHYR-SBX: Make.",
					"working_dir": "${project_path}/app/stm32f051_zephyr_sbx/",
					"shell_cmd": "./prj-build-flash.sh make",
				},
				{
					"name": "STM32F051-ZEPHYR-SBX: Rebuild.",
					"working_dir": "${project_path}/app/stm32f051_zephyr_sbx/",
					"shell_cmd": "./prj-build-flash.sh rebuild",
				},
				{
					"name": "STM32F051-ZEPHYR-SBX: Make and flash.",
					"working_dir": "${project_path}/app/stm32f051_zephyr_sbx/",
					"shell_cmd": "./prj-build-flash.sh flash",
				},
				{
					"name": "clang-format-14: Format this file, edit inplace.",
					"shell_cmd": "clang-format-14 ${file} --style=file -i",
				},
				{
					"name": "Start OpenOCD on Rijeka board.",
					"shell_cmd": "gnome-terminal --full-screen -- bash -c \"cd ${project_path} && boards/rijeka.openocd.sh; exec bash\"",
				},
				{
					"name": "bash: make executable",
					"shell_cmd": "chmod +x ${file}",
				},
			],
		},
		// -----------------------------------------------------------------------------------------
		{
			"name": "tools",
			"shell_cmd": "${file}",
			"variants": [
				{
					"name": "C++ formatter: Format all files in the project.",
					"working_dir": "${project_path}",
					"shell_cmd": "python3 tools/formatter_cpp.py",
				},
				{
					"name": "C++ formatter: Format this file.",
					"working_dir": "${project_path}",
					"shell_cmd": "python3 tools/formatter_cpp.py ${file}",
				},
				{
					"name": "python3: Run this module in project directory.",
					"working_dir": "${project_path}",
					"shell_cmd": "python3 -u ${file}",
					"file_regex": "^[ ]*File \"(...*?)\", line ([0-9]*)",
				},
				{
					"name": "python3: Run this module in its own directory.",
					"working_dir": "${file_path}",
					"shell_cmd": "python3 -u ${file}",
					"file_regex": "^[ ]*File \"(...*?)\", line ([0-9]*)",
				},
				{
					"name": "python3: Run pylama on all repo.",
					"working_dir": "${project_path}",
					"shell_cmd": "pylama -o pylama.ini",
					"file_regex": "(...*?):([0-9]*):.*",
				},
				{
					"name": "python3: Run pylama on this file.",
					"working_dir": "${project_path}",
					"shell_cmd": "pylama -o pylama.ini ${file}",
					"file_regex": "(...*?):([0-9]*):([0-9]*)\\s(.*)",
				},
				{
					"name": "python3: Run ISORT on this file.",
					"working_dir": "${project_path}",
					"shell_cmd": "isort ${file}",
				},
			],
		},
		// -----------------------------------------------------------------------------------------
		{
			"name": "integration tests",
			"shell_cmd": "${file}",
			"variants": [
				{
					"name": "Run all PC tests.",
					"working_dir": "${project_path}",
					"shell_cmd": "pytest -m pctest",
				},
				{
					"name": "Collect all tests.",
					"working_dir": "${project_path}",
					"shell_cmd": "pytest --collect-only",
				},
			],
		},
		// -----------------------------------------------------------------------------------------
		{
			"name": "host tests",
			"shell_cmd": "${file}",
			"variants": [
				{
					"name": "GNU: Make.",
					"working_dir": "${project_path}",
					"shell_cmd": "export EMB1_TOOLCHAIN=gnu && make host-tests",
					"file_regex": "^(..[^:]*):([0-9]+):?([0-9]+)?: error:? (.*)$",
				},
				{
					"name": "GNU: Rebuild.",
					"working_dir": "${project_path}",
					"shell_cmd": "export EMB1_TOOLCHAIN=gnu && make -B host-tests",
					"file_regex": "^(..[^:]*):([0-9]+):?([0-9]+)?: error:? (.*)$",
				},
				{
					"name": "GNU: Make and run all.",
					"working_dir": "${project_path}",
					"shell_cmd": "export EMB1_TOOLCHAIN=gnu && make host-tests-run",
					"file_regex": "^(..[^:]*):([0-9]+):?([0-9]+)?: error:? (.*)$",
				},
				{
					"name": "LLVM: Make.",
					"working_dir": "${project_path}",
					"shell_cmd": "export EMB1_TOOLCHAIN=llvm && make host-tests",
					"file_regex": "^(..[^:]*):([0-9]+):?([0-9]+)?: error:? (.*)$",
				},
				{
					"name": "LLVM: Rebuild.",
					"working_dir": "${project_path}",
					"shell_cmd": "export EMB1_TOOLCHAIN=llvm && make -B host-tests",
					"file_regex": "^(..[^:]*):([0-9]+):?([0-9]+)?: error:? (.*)$",
				},
				{
					"name": "LLVM: Make and run all.",
					"working_dir": "${project_path}",
					"shell_cmd": "export EMB1_TOOLCHAIN=llvm && make host-tests-run",
					"file_regex": "^(..[^:]*):([0-9]+):?([0-9]+)?: error:? (.*)$",
				},
				{
					"name": "clang-format: Format this file, edit inplace.",
					"working_dir": "${project_path}",
					"shell_cmd": "clang-format-14 ${file} --style=file -i",
				},
				{
					"name": "Run all integration tests for host tests.",
					"working_dir": "${project_path}",
					"shell_cmd": "pytest -m pctest -k host-tests",
				},
			],
		},
		// -----------------------------------------------------------------------------------------
	],
	// =============================================================================================
	"settings": {
		"tab_size": 4,
		"auto_match_enabled": false,
		"rulers": [ 100, 100.5, ],
	},
	// =============================================================================================
}
