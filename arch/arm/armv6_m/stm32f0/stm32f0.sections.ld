/*
This file is supposed to be included from within a SECTIONS block of a linker script.
*/

/* =========================================================================*/
/* CODE */
/* =========================================================================*/

/* The startup code goes first into FLASH */
.initial_sp_value : ALIGN(4) {
	KEEP(*(.initial_sp_value))
	. = ALIGN(4);
} >flash_region

.exception_vectors : ALIGN(4) {
	KEEP(*(.exception_vectors))
	. = ALIGN(4);
} >flash_region

.interrupt_vectors : ALIGN(4) {
	KEEP(*(.interrupt_vectors))
	. = ALIGN(4);
} >flash_region

/* The program code and other data goes into FLASH 

.text : { *(.text)}
means get all .text sections of all object files 
and concatenate them into one .text section.

.{section}: the basic section.
.{section}.*: sections generated by -ffunction-sections and -fdata-sections so that each function/data has a unique section.

*/
.text : ALIGN(4) {
	*(.text .text*) /* Get all .text sections of all object files and concatenate them into one .text section. */
	*(.glue_7) /* glue arm to thumb code */
	*(.glue_7t) /* glue thumb to arm code */
	*(.eh_frame)

/*
https://blog.thea.codes/the-most-thoroughly-commented-linker-script/
*(.text .text.* .gnu.linkonce.t.*)
*(.rodata .rodata* .gnu.linkonce.r.*)
*/

	KEEP (*(.init))
	KEEP (*(.fini))
	. = ALIGN(4);
} >flash_region

.rodata : ALIGN(4) {
	*(.rodata .rodata*)
	. = ALIGN(4);
} >flash_region

/*  .preinit_array: {
	PROVIDE_HIDDEN (__preinit_array_start = .);
	KEEP (*(.preinit_array*))
	PROVIDE_HIDDEN (__preinit_array_end = .);
} >flash_region

.init_array: {
	PROVIDE_HIDDEN (__init_array_start = .);
	KEEP (*(SORT(.init_array.*)))
	KEEP (*(.init_array*))
	PROVIDE_HIDDEN (__init_array_end = .);
} >flash_region

.fini_array : {
	PROVIDE_HIDDEN (__fini_array_start = .);
	KEEP (*(SORT(.fini_array.*)))
	KEEP (*(.fini_array*))
	PROVIDE_HIDDEN (__fini_array_end = .);
} >flash_region
*/
/* =========================================================================*/
/* INITIALIZED DATA
/* =========================================================================*/

_data_lma_start = LOADADDR(.data);

/* Initialized data sections goes into RAM, load LMA copy after code */
.data : ALIGN(4) {
	_data_vma_start = .;
	*(.data .data*)
	. = ALIGN(4);
	_data_vma_end = .;
} >sram_region AT> flash_region

/* =========================================================================*/
/* ZERO-INITIALIZED DATA (BSS)
/* =========================================================================*/

.bss : ALIGN(4) {
	*(.bss .bss.*)
	. = ALIGN(4);
} >sram_region

_bss_start = ADDR(.bss);
_bss_end = ADDR(.bss) + SIZEOF(.bss);

/* =========================================================================*/
/* MAIN STACK */
/* =========================================================================*/

/* Limit of the Main Stack, which is used for exception handlers and the startup code
	 (i.e. before the scheduler has started). */
_main_stack_size = 0x180;
_main_stack_start = ADDR(main_stack);
_main_stack_end = ADDR(main_stack) + SIZEOF(main_stack);

main_stack : ALIGN(4) {
	. = . + _main_stack_size;
} >sram_region
