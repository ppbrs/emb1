#
# source scripts/openocd/common.cfg
#

# If a memory access by GDB fails, report it so that GDB will print a “Cannot
# access memory” message rather than faking it to look like it contains all
# zeroes.
gdb_report_data_abort enable

# Likewise, if a CPU register access by GDB fails, report it rather than faking
# it.
gdb_report_register_access_error enable

# ==================================================================================================
#
# source scripts/openocd/arneb.cfg
#

#
# Target configuration for Arneb Zaber-custom JTAG adapter.
#
# Pins are as follows:
# ADBUS0: TCK
# ADBUS1: TDI
# ADBUS2: TDO
# ADBUS3: TMS
# ADBUS4: TRST
# ADBUS5: TRST_OE
# ADBUS6: SRST
# ADBUS7: SRST_OE
# ACBUS0: ~LED
# ACBUS1: N/C
# ACBUS2: N/C
# ACBUS3: N/C
# ACBUS4: N/C
# ACBUS5: N/C
# ACBUS6: N/C
# ACBUS7: N/C
#
adapter driver ftdi
ftdi_vid_pid 0x0403 0x6014
ftdi_layout_init 0x0008 0xFFFB
ftdi_layout_signal nSRST -data 0x0040 -oe 0x0080
ftdi_layout_signal nTRST -data 0x0010 -oe 0x0020
ftdi_layout_signal LED -ndata 0x0100
ftdi_layout_signal SWD_EN -data 0 -oe 0
ftdi_layout_signal SWDIO_OE -ndata 0x0200

# ==================================================================================================

transport select swd

set CHIPNAME solo

#
#source stm32h/chip.cfg
#

# Bring in OpenOCD’s chip script.
# STM32H7xxxI 2Mo have a dual bank flash.
source [find target/stm32h7x_dual_bank.cfg]

set _CPUNAME $CHIPNAME.cpu0

# source stm32h/spi-flash.cfg

reset_config srst_only srst_nogate

# ==================================================================================================
#
# Target events handlers.
#

$_CPUNAME configure -event reset-init {
	echo "EVENT: reset-init"
}

$_CPUNAME configure -event gdb-attach {
	echo "EVENT: gdb-attach"

	# The target should be halted when GDB attaches.
	# if { [[target current] curstate] eq "reset" } {
	# 	# The processor is in reset. To get it into halt state, we must “reset
	# 	# halt”; “halt” alone does not work.
	# 	reset halt
	# } else {
	# 	halt
	# }

	# Automatically break on crashes. If you want to debug a crash handler
	# itself, disable this. Most of the time you don’t and you’re more
	# interested in why the code crashed in the first place.
	#
	# Note that if you turn off vector catch on hard_err, you will also not get
	# a breakpoint in the system error reporting framework.
	# [target current] cortex_m vector_catch hard_err mm_err bus_err int_err state_err chk_err nocp_err
}

$_CPUNAME configure -event gdb-detach {
	echo "EVENT: gdb-detach"
}

$_CPUNAME configure -event gdb-start {
	echo "EVENT: gdb-start"
}

$_CPUNAME configure -event gdb-end {
	echo "EVENT: gdb-end"
}

# ==================================================================================================
